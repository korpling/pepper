<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<groupId>org.corpus-tools</groupId>
		<artifactId>pepper</artifactId>
		<version>3.6.1-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<modelVersion>4.0.0</modelVersion>
	<artifactId>pepper-parentModule</artifactId>
	<packaging>pom</packaging>
	<properties>
		<component.descriptor.name>serviceComponents.xml</component.descriptor.name>
	</properties>
	<description>Provides shared POM-data.</description>
	<ciManagement>
		<system>Jenkins</system>
		<url>https://korpling.german.hu-berlin.de/jenkins/</url>
	</ciManagement>
	<inceptionYear>2011</inceptionYear>

	<repositories>
		<repository>
			<id>korpling</id>
			<name>korpling maven repo</name>
			<url>http://korpling.german.hu-berlin.de/maven2</url>
		</repository>
	</repositories>
	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>
	<dependencies>
		<!-- Lists all dependencies comming from parent and sets their scope to 
			provided. This is necessary, because all these dependencies must be provided 
			inside the Pepper OSGi framework. When creating a Pepper module's zip these 
			deps need to be set to provided, to not include them again in the Pepper 
			module zips. -->
		<dependency>
			<groupId>org.corpus-tools</groupId>
			<artifactId>pepper-framework</artifactId>
			<version>${project.parent.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.corpus-tools</groupId>
			<artifactId>salt-api</artifactId>
			<version>${salt.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang3.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>xmlunit</groupId>
			<artifactId>xmlunit</artifactId>
			<version>${xmlunit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- start: OSGI service-component -->
		<!-- OSGI Annotations. Use standard first, override with custom. -->
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.core</artifactId>
			<version>${org.osgi.core.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.compendium</artifactId>
			<version>${org.osgi.compendium.version}</version>
			<scope>provided</scope>
		</dependency>
		<!-- end: OSGI service-component -->
		<!-- start: OSGi declaractive services -->
		<dependency>
			<groupId>com.carrotgarden.osgi</groupId>
			<artifactId>carrot-osgi-anno-scr-core</artifactId>
			<version>${carrot-osgi-anno-scr-core.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.carrotgarden.osgi</groupId>
			<artifactId>carrot-osgi-anno-scr-make</artifactId>
			<version>${carrot-osgi-anno-scr-make.version}</version>
			<scope>provided</scope>
		</dependency>
		<!-- end: OSGi declaractive services -->
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>${maven-assembly-plugin.version}</version>
				<configuration>
					<descriptors>
						<descriptor>${assemblies.name}</descriptor>
					</descriptors>
					<appendAssemblyId>false</appendAssemblyId>
					<finalName>${project.artifactId}-${project.version}</finalName>
					<outputDirectory>target/distribution</outputDirectory>
					<workDirectory>target/assembly/work</workDirectory>
				</configuration>
			</plugin>
			<!-- end: assembly plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<!-- start: for generating license headers in source files. Run mvn license:format -->
			<plugin>
				<groupId>com.google.code.maven-license-plugin</groupId>
				<artifactId>maven-license-plugin</artifactId>
				<version>${maven-license-plugin.version}</version>
				<configuration>
					<header>${basedir}/src/etc/header.txt</header>
					<includes>
						<include>src/main/java/**</include>
						<include>src/test/java/**</include>
					</includes>
				</configuration>
			</plugin>
			<!-- end: for generating license headers in source files. Run mvn license:format -->
			<plugin>
				<!-- copying OSGI-INF folder -->
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin.version}</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>process-classes</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${serviceComponents}</outputDirectory>
							<resources>
								<resource>
									<directory>${serviceComponentsTarget}</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- start: creation of bundle jar -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>${maven-bundle-plugin.version}</version>
				<extensions>true</extensions>
				<configuration>
					<manifestLocation>${META-INF}</manifestLocation>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<instructions>
						<Bundle-Name>${project.artifactId}</Bundle-Name>
						<Bundle-SymbolicName>${project.groupId}.${project.artifactId};singleton:=true</Bundle-SymbolicName>
						<Bundle-Version>${project.version}</Bundle-Version>
						<Bundle-RequiredExecutionEnvironment>JavaSE-${java.version}</Bundle-RequiredExecutionEnvironment>
						<Service-Component>${allServiceComponents}</Service-Component>
					</instructions>
				</configuration>
			</plugin>
			<!-- end: creation of bundle jar -->
		</plugins>
		<finalName>${project.artifactId}-${project.version}</finalName>
	</build>
	<profiles>
		<profile>
			<id>release</id>
			<build>
				<plugins>
					<!-- generate a jar for sources -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<version>${maven-source-plugin.version}</version>
						<executions>
							<execution>
								<id>attach-sources</id>
								<phase>verify</phase>
								<goals>
									<goal>jar-no-fork</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- Generates a Javadoc -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>${maven-javadoc-plugin.version}</version>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- The Maven GPG plugin is used to sign the components -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>${maven-gpg-plugin.version}</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<name>${project.groupId}.${project.artifactId}</name>
</project>
